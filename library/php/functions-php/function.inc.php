<?php


// Функции это заранее подготовленный набор действий которые надо сделать много где много раз!
// Они регистроНЕзависимы в отличии от переменных и констант!
// В функцию можно передать аргументы в () <-- скобках!
// Аргументы это переменные которые впадлу обьявлять и присваивать им значения где-то в коде
// Очень нужно и полезно так делать

// Во время создания функции надо написать "function", дать ей название
//В скобках указать аргументы

// (можно без аргументов), потом открыть {} <-- фигурные скобки (в них будет находится код).
// Ну и в конце точка с запятой!

function magic ($magic){// Do some fucking magic!
    // Аргументы это переменные с которыми функция будет работать, изначально они пустые!
    // Заполнять их необходимо при вызове функции.
    // Внутри функции может быть любой код, который надо исполнять сколько нужно раз!
    // Это надо что бы не писать повторяющийся код т.к. легче его написать 1 раз
    // И юзать когда надо!



    echo "<p>Cheking $magic magic!"; // Выводим сообщене!

    if ($magic == 'fucking') {  // Здесь проверка аргумента!

        echo "<p>I`ll try to do some fucking magic!";

        $result_magic = true; // А Это для следующей функции!

    } else {

        echo "<p>It`s not a magic!";

        $result_magic = false; // Это тоже!
    }

    // Функции могу создавать другие функции!

    // Эта функция принимает агумент

    check_magic($result_magic); // Функции могут вызывать другие функции!

};

function check_magic ($result_magic){ // Вот для этой функции было присвоенной значение
    //переменной $result_magic!

    // Эти переменные локальные т.е. их можно оспользовать только внутри этой же функции!

    if ($result_magic) { // Проверка переменной!

        echo "<p>Magic is done!";

    }else{

        echo "<p>I can`t do some fucking magic!!!";

    }
    // Функции могут исполнять вообще любой код!

};

echo "<p>===";

magic('fucking');

echo "<p>===";

magic('ass');

echo "<p>===";

magic('boobs');

echo "<p>===";

magic('fucking');


// Функция может быть рекурсивной. Т.е. вызывать сама себя.
// Ща покажу)

echo "<p>";

function recursive_func ($var_rec_func){

    if ($var_rec_func <= 20) {

        echo " - ";
        echo "$var_rec_func";

        recursive_func($var_rec_func + 1);
        // Тут мы изменем значение аргумента, что бы не попасть в петлю!
        // Да, это по факту цикл!
    }

}

recursive_func(0);

// С аргументами функции ебли больше чем с ней самой!
// Их может как не быть, так и быть дохуя...
// А еще при вызове можно присваивать к конкретному аргументу...
// Вобщем полный пиздец!
// Где-то проебатся как нехуй делать!

// В арументах может лежать что угодно, и передавать туда можно что угодно!

// Функции могу возвращать что-то!

function return_func($num_ret_f){

    echo "<p>Будет исполнено!";

    return  $num_ret_f * 2; // Эта функция возвращает переменную из аргументе умноженную на 2!

    echo "Не будет исполнено!";
    //  return - останавливает выполнение функции и выплевывает че получилось!

}


echo "<p>--" . return_func(11); // 22 Ёпта!

// Аргументы функции
// Аргументов может быть сколько угодно много!
// Реально скок передашь столько и будет!
// Чтобы следить за ублюдками есть некоторые функции!

// Наркотики = Зло!!!
// Но весело (:!
// Пиздец как штормит!

// Лан, хуярим дальше пока эффект действует!(:

echo "<p>Work with arguments in functions-php-js!";


// Обьявляем функцию!

new_func_many_arg(1,2,3,4,"text",true,false,"Something",$arg_var = 1);

// Куча аргументов... и че с ними делать?!


// Обработать с помощью всяких офигенных функуий)))
// 	func_num_args();	// Обрабатывает количество аргуменов!
//	func_get_arg(*index*);	// Достает конкретый аргумент по индексу!
//	func_get_args(); 	// Обрабатывает аргументы, и делает из них массив!

function new_func_many_arg (){ // Вот это функция принимает много аргуметов!

    // Эта функция считает количество аргументов и выплевывает циферку!
    $how_many_args = func_num_args();	// Здесь обрабатывается количество аргуменов!
    echo "<p>Всего элементов: $how_many_args!";	// Выплевывает циферку количества аргументов!

    // Эта функция возврашает сам аргумент!
    $get_specific_arg = func_get_arg(1);	// Здесь можно достать конкретый аргумент по индексу!
    // Счет начинается с 0!
    // т.е. первый арумент = индекс - 0
    // второй = индекс - 1
    // и т.д.

    echo "<p>Scecific arg $get_specific_arg";	// Выплевываем аргумент который искали!

    echo "<p>Вывод непосредственно элементов!";

    // Эта функция воозвращает массив!
    $get_many_specific_args = func_get_args(); // Аргументы можно обработать как массив!
    // С помощью "foreach"!
    echo "<br>";

    foreach($get_many_specific_args as $key => $value){ // Перебираем массив!

        echo "<br>Arg $key : $value";	// Выплевываем массив с аргументами!
        // И показываем их индексы и данные внутри!
    }
}

// Калабля - callable
// Эта хрень нужна что бы передать функцию как аргумент!

function mult(int $num){ // Тут принимает циферку
    // int перед аргументом говорит что надо получить цифру!
    // Если не цифра - СмЭрть!!!
    return $num * $num; // Умножаем... можно творить любую хуйню!
}

function bar(callable $var, $arg){ // А вот тут есть калабля - она говорит что мы ждем функцию!
    // Ебанная магия сука!!!
    return $var($arg);
}

echo "<p>", bar("mult",23);	// При обьявлении функции надо указать имя функции!
// Ее пихают в другую функцию и заставляют пиздячить!!!
// Обязательно смотри какую хуйню ты вызываешь!!!

// Никаких демонов из преисподней не вызывай!!!

function hueta_ebannaya(int $i, string $s, bool $b, array $a, int ...$fuck):bool { //<-- вот так!
// Еще можно указать какой тип данных возвратит функция. Надо просто написать :*тип данных* после ()
    echo "<p>Do some fucking magic!";

    $get_many_fucking_args = func_get_args(); // Аргументы можно обработать как массив!
    // С помощью "foreach"!
    echo "<br>";

    foreach($get_many_fucking_args as $key => $value){ // Перебираем массив!

        echo "<br>Arg $key : $value";	// Выплевываем массив с аргументами!
        // И показываем их индексы и данные внутри!
    }

    // Можно указать какую хуйню ты ждешь!

// А через 3 точки можно указать какого типа хуйню ты ждешь после заполнения всех нужны типов!
    // И записать в переменную
}
?>